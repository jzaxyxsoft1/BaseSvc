var db = require('DB').DB;
var tool = require("Tools").Tools;
var commoditySvc = require('./CommoditySvc');
var async = require('async');
var _ = require('underscore');
exports.getObjsPriceNDiscountByCarType = function (type, query, option, cartypeid, cardType, callback) {
    async.waterfall([
        function (cb) {
            commoditySvc.getCommodity(type, query, option, cartypeid, function (e, ds) {
                if (cartypeid && type == 'Project') {
                    var ll = _.filter(ds, function (i) {
                        return _.any(i.CarTypes, function (ii) {
                            return ii.Value.indexOf() > -1 || cartypeid.indexOf(cartypeid) > -1
                        })
                    });
                    ds = ll;
                }
                cb(null, ds);
            });
        }  , ,
        function (objs, cb) {
            getObjPrice(objs, cartypeid, tp == 'Project' && cartypeid, function (e, ds) {
                cb(null, ds);
            });
        } ,
        function (objs, cb) {
            async.each(objs,
                function (obj, scb) {
                    var bo = _.find(global.BOs,function (i) {
                        return i._id == obj.Define.Value;
                    }).ValuePath;
                    var vps = _.compact(bo.split('/')).reverse();
                    db.CardDiscount.find({"RelativeObj.Item1": {$in: vps}}).toArray(function (e, dis) {
                        for (var ii = 0; ii < vps.length; ii++) {
                            var l = _.find(dis, function (di) {
                                return di.RelativeObj.Item1 == vps[ii];
                            });
                            if (l == null) {
                                continue;
                            }
                            else {
                                r.push({id: obj._id, items: l.Items});
                            }
                        }
                        scb(null);
                    });
                },
                function () {
                    cb(null, r);
                });
        }
    ], function (e, ds) {
        callback(null, ds);
    });
}
exports.getObjPriceByCarType = function (type, query, option, cartypeid, callback) {
    async.waterfall([
        function (cb) {
            commoditySvc.getCommodity(type, query, option, cartypeid, function (e, ds) {
                if (cartypeid && type == 'Project') {
                    var ll = _.filter(ds, function (i) {
                        return _.any(i.CarTypes, function (ii) {
                            return ii.Value.indexOf(cartypeid) > -1 || cartypeid.indexOf(ii.Value) > -1
                        })
                    });
                    ds = ll;
                }
                cb(null, ds);
            });
        },
        function (objs, cb) {
            getObjPrice(objs, cartypeid, tp == 'Project' && cartypeid, function (e, ds) {
                cb(null, ds);
            });
        }
    ], function (e, ds) {
        res.jsonp(ds);
    });
};
exports.getSheetMetalPrice = function (projectID, carType, cardType, callback) {
    async.parallel(
        {
            //价格
            pri: function (cb) {
                db.SheetMetalProjectPrice.findOne({_id: projectID}, function (e, pri) {
                    pri.Items = _.filter(pri.Items, function (itm) {
                        return itm.IsBuildIn || _.any(itm.CarTypes, function (cti) {
                            return cti.Value.indexOf(carType) > -1 || carType.indexOf(cti.Value) > -1;
                        })
                    });
                    cb(e, pri);
                })
            },
            //项目
            pro: function (cb) {
                db.Project.findOne({_id: projectID}, {Name: 1, Model: 1, Unit: 1, Define: 1}, function (e, pro) {
                    db.BODefine.findOne({_id: pro.Define.Value}, function (ee, df) {
                        pro.ValuePath = df.ValuePath;
                        cb(e, pro);
                    });
                });
            }
        },
        function (e, result) {
            var cartypeclass;
            async.parallel(
                [
                    //车型类别
                    function (cb) {
                        db.CarTypeClass.find({'$where': '"' + result.pro.ValuePath + '".indexOf(this.Range)>-1'}, {Name: 1, CarTypes: 1}).toArray (function(e, ctcls) {

                            if (ctcls) {
                                cartypeclass = _.find(ctcls, function (o) {
                                    return _.any(o.CarTypes, function (ii) {
                                        return ii.Value.indexOf(carType) > -1 || carType.indexOf(ii.Value) > -1
                                    })
                                });

                                cb(null, cartypeclass);
                            }
                            else {
                                cb(null, null);
                            }
                        });
                    },
                    //折扣
                    function (cb) {
                        if (!cardType) {
                            cb(null, 1)
                        }
                        else {
                            //类别Id集合
                            var itids = _.compact(result.pro.ValuePath.split('/'));
                            itids.push(id); //对象Id入栈
                            db.CardDiscount.find({'RelativeObj.Item1': {$in: itids}, 'Items.Item1': cardType}, {RelativeObj: 1, Items: 1}).toArray(function (e, dis) {
                                if (dis.length == 0) {
                                    cb(null, 1);
                                }
                                else {
                                    var dic = 1, pl, _i;
                                    while (itids.length) {
                                        //类别或对象Id出栈
                                        pl = itids.pop();
                                        //类别或对象设置了折扣
                                        _i = _.find(dis, function (dii) {
                                            return dii.RelativeObj.Item1 == pl;
                                        });
                                        if (_i) {
                                            _i = _.find(_i.Items, function (cti) {
                                                return cti.Item1 == cardType;
                                            });
                                            if (_i) {
                                                dic = _i.Item3;
                                                itids = [];
                                            }
                                        }
                                    }
                                    cb(null, dic);
                                }
                            });
                        }
                    }
                ],
                function (ee, rts) {
                    var o = result.pri;
                    o.Model = result.pro.Model;
                    o.Unit = result.pro.Unit;
                    o.Discount = rts[1];
                    o.Items = cartypeclass==null?[]: _.map(o.Items, function (itm) {
                        var cpi = _.find(itm.CarTypeClassPrices, function (pi) {
                            return pi._id == cartypeclass._id;
                        });
                        return {Price: (cpi ? cpi.Value : 0), Name: itm.Name, IsBuildIn: itm.IsBuildIn};
                    });
                    callback(ee, o);
                }
            )
        }
    );
}
function getObjsPrice(objs, cartypeid, requireCarTypeClass, callback) {
    async.waterfall([
        function (cb) {
            var ids = _.chain(objs).map(function (i) {
                return i._id;
            }).uniq().value();
            db.Price.find({"RelativeObj.Item1": {$in: ids}}).toArray(function (e, ds) {
                _.each(objs, function (i) {
                    i.Price = _.find(ds, function (pri) {
                        return pri.RelativeObj.Item1 == i._id;
                    });
                    i.Price = i.Price || {DefaultPrice: 0, CarTypePrice: 0};
                });
                cb(null, objs);
            });
        } ,
        function (cb) {
            async.waterfall([
                function (scb) {
                    var ranges = new Array();
                    _.each(objs, function (i) {
                        ranges.push(_.compact(i.ValuePath.split('/')));
                        ranges.push(i.Define.Value + '_' + i._id);
                    });
                    ranges = _.chain(ranges).flatten().uniq().value();

                    var cts = tool.CreateValuePathArray(cartypeid, '/');
                    db.CarTypeClass.find({Range: {$in: ranges}}).toArray(function (e, rs) {
                        scb(null, rs);
                    });
                },
                function (cartypeclasses, scb) {
                    if (cartypeclasses == undefined || cartypeclasses == null) {
                        scb(null);
                        return;
                    }
                    _.each(objs, function (i) {
                        if (i.Price) {
                            i.Price.CarTypePrice = i.Price.DefaultPrice;
                            if (i.Price.CarTypeClasses.length > 0) {
                                var _vp = i.ValuePath + '_' + i._id;
                                var ctc = _.filter(cartypeclasses, function (ctci) {
                                    return _vp.indexOf(ctci.Range) > -1 && _.any(ctci.CarTypes, function (cti) {
                                        cartypeid.indexOf(cti.Value) > -1 || cti.Value.indexOf(cartypeid) > -1;
                                    });
                                });
                                if (ctc.length > 0) {
                                    ctc = _.max(ctc, function (ctci) {
                                        return ctci.Range.length;
                                    });
                                    var pp = _.find(i.Price.CarTypeClasses, function (prii) {
                                        return pri.Item1 == ctc._id;
                                    });
                                    if (pp) {
                                        i.Price.CarTypePrice = eval(i.Price.DefaultPrice + pp.Item3 + pp.Item4);
                                    }
                                }
                            }
                        }
                        else {
                            i.Price = {DefaultPrice: 0, CarTypePrice: 0};
                        }
                    });
                    scb(null);
                }
            ], function (e) {
                _.each(objs, function (i) {
                    if (i.Price == undefined) {
                        i.Price = {DefaultPrice: i.Price.DefaultPrice};
                    }
                    if (i.Price.CarTypePrice == undefined) {
                        i.CarTypePrice = i.DefaultPrice;
                    }
                });
                cb(null);
            });
        }
    ], function (e) {
        callback(objs);
    });
};
function getObjDiscounts(tp, query, cb) {
    cSvc.getMaterails(tp, query, {Define: 1}, function (e, objs) {
        if (objs == null) {
            cb(null);
            return;
        }
        var r = [];
        async.each(objs,
            function (obj, scb) {
                var bo = _.find(global.BOs,function (i) {
                    return i._id == obj.Define.Value;
                }).ValuePath;
                var vps = _.compact(bo.split('/')).reverse();
                db.CardDiscount.find({"RelativeObj.Item1": {$in: vps}}).toArray(function (e, dis) {
                    for (var ii = 0; ii < vps.length; ii++) {
                        var l = _.find(dis, function (di) {
                            return di.RelativeObj.Item1 == vps[ii];
                        });
                        if (l == null) {
                            continue;
                        }
                        else {
                            r.push({id: obj._id, items: l.Items});
                        }
                    }
                    scb(null);
                });
            },
            function () {
                cb(null, r);
            });
    });
};