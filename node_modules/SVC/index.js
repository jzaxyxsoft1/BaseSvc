var db = require('DB').DB;
var pinyin = require('pjpinyin');
var async = require('async');
var _= require('underscore');
var G = exports.G = {
    GV: {BODefine: []},
    IBO: {'AutoPart': '配件', 'AutoArticles': '用品', 'Project': '项目', 'CombinedObj': '套餐','SheetMetalProject':'钣金项目'},
    ICommodity: {'AutoPart': 1, 'AutoArticles': 1, 'Project': 1},
    ISimcode: {'Employee': 1,'SheetMetalProject':1},
    IHI: {'Department': 1},
    beforSave: function (type, obj, callback) {
        async.parallel({
            define: function (cb) {
                if (G.IBO[tp] && obj.Define) {
                    if (G.GV[tp]) {
                        var d = G.getGVObjById(obj.Define.Value);
                        obj.Define.Name = d ? d.Name : '无效类别';
                        cb(null);
                    }
                    else {
                        db[tp].findOne({_id: obj.Define.Value}, function (e, d) {
                            obj.Name = d ? d.Name : '无效类别';
                            cb(null);
                        })
                    }
                }
                else {
                    cb(null);
                }
            },
            IHI: function (cb) {
                if (G.IBO[tp] && obj.Parent) {
                    if (G.IHI[tp]) {
                        if(G.GV[tp]){
                            var d = G.GV[tp].find(function (i){ return i._id== obj.Parent.Value;});
                            obj.Parent.Name= d? d.Name:'无效上级类别';
                            if(obj.ValuePath){
                                if(obj.ValuePath.indexOf(d.ValuePath)>-1){ cb(null);}

                            }
                            else{
                                cb(null,{needValuePath:1});
                            }
                        }
                    }
                    else {
                        cb(null);
                    }
                }
                else {
                    cb(null);
                }
            },
            ISimcode: function (cb) {
                if (G.IBO[tp] && obj.Name) {
                }
                else {
                    cb(null);
                }
            }
        }, function (e) {
            callback(e);
        })
    },
    getGVObjById: function (tp, id) {
        return _.find(G.GV[tp],function (i){return i._id== id});
    }
};
var Svc = exports.Svc= {
    GV:{},
    db:db
};
var Helper=exports.Helper={
    convertOption:function (option){
        option = option||{};
        Object.keys(option).forEach(function (i){option[i]=Number(option[i])})
    }
};
exports.init=function (callback){
    async.parallel([
        loadDefines ,
        loadDics
    ],callback)
};
function loadDefines(cb){
    db.BODefine.find({}).toArray(function (e,ds){
        Svc.GV["BODefine"]=ds;
        cb(null);
    });
}
function loadDics(cb){
    cb(null);
}
exports.BaseSvc = require('./baseSvc').BaseSvc;
exports.PriceSvc = require('./PriceSvc.js');
exports.CommoditySvc = require('./CommoditySvc.js');
exports.SheetMetalSvc= require('./SheetMetalSvc').SheetMetalSvc;